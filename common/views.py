from django.shortcuts import render
from django.views import View
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
import requests
import logging
from common.forms import GuestForm  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞


from django.views.generic import TemplateView, RedirectView
from django.utils.decorators import method_decorator
from django.views.decorators.cache import never_cache

class UnlockView(TemplateView):
    template_name = "unlock.html"

@method_decorator(never_cache, name='dispatch')
class MobileRedirectView(RedirectView):
    permanent = False

    def get_redirect_url(self, *args, **kwargs):
        user_agent = self.request.META.get('HTTP_USER_AGENT', '').lower()
        if "mobile" in user_agent or "android" in user_agent or "iphone" in user_agent:
            return "/unlock/"
        return "/main/"

logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
TELEGRAM_BOT_TOKEN = "7738261243:AAGftaKXWSglJ1hkfKYx5GPYLjGZhf7ngfQ"
TELEGRAM_CHAT_ID = "-4782301339"

def send_to_telegram(name, attending, transfer, drinks, message):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    text = f"üìù –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\nüë§ –ò–º—è: {name}\n‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: {attending} \n"
    if attending == "–î–∞":
        text += f"üöó –ù—É–∂–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä: {transfer}\n ü•Ç –ù–∞–ø–∏—Ç–∫–∏: {', '.join(drinks) if drinks else '‚Äî'}\n"
    text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}"

    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    response = requests.post(telegram_url, data={"chat_id": TELEGRAM_CHAT_ID, "text": text})

    return response.status_code == 200

@method_decorator(csrf_exempt, name="dispatch")  # –û—Ç–∫–ª—é—á–∞–µ–º CSRF –¥–ª—è —Ñ–æ—Ä–º—ã
class Invitation(View):
    form_class = GuestForm
    template_name = "main.html"

    def get(self, request, *args, **kwargs):
        return render(request, self.template_name, {'request': request})

    def post(self, request, *args, **kwargs):
        form = self.form_class(request.POST)

        if form.is_valid():
            name = form.cleaned_data.get("name")
            attending = form.cleaned_data.get("attending")
            # home = form.cleaned_data.get("home")
            transfer = form.cleaned_data.get("transfer") if attending == "–î–∞" else None
            drinks = form.cleaned_data.get("drinks") if attending == "–î–∞" else []
            message = form.cleaned_data.get("message", "‚Äî")

            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã: {name}, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: {attending}, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä: {transfer}, –Ω–∞–ø–∏—Ç–∫–∏: {drinks}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            if send_to_telegram(name, attending, transfer, drinks, message):
                return JsonResponse({"status": "success", "message": "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!"})
            else:
                return JsonResponse({"status": "error", "message": "–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã."})

        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: {form.errors}")
        return JsonResponse({"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."})
